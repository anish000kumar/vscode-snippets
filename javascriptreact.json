{
	"React component": {
		"prefix": "rc_component",
		"body": [
			"import React from 'react'",
			"",
			"function $1() {",
			"  return <div>$0</div>",
			"}",
			"",
			"export default $1",
			""
		],
		"description": "React component"
	},
	"React useState": {
		"prefix": "rc_state",
		"body": [
			"const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:initialState});"
		],
		"description": "Create React useState hook with a capitalized setter function."
	},
	"React useEffect with dependencies": {
		"prefix": "rc_effect",
		"body": [
			"useEffect(() => {",
			"\t$1",
			"}, [$2]);"
		],
		"description": "Create React useEffect hook with dependencies."
	},
	"React useMemo with dependencies": {
		"prefix": "rc_memo",
		"body": [
			"const ${1:memoizedValue} = useMemo(() => $2, [$3]);"
		],
		"description": "Create React useMemo hook with dependencies."
	},
	"React state": {
		"prefix": "rc_api",
		"body": [
			"const [${1:action}Status, set${1/(.*)/${1:/capitalize}/}Status] = useState({data: $2, error: null, loading: false});",
			"",
			"const $1 = async () => {",
			"   set${1/(.*)/${1:/capitalize}/}Status({loading: true, data: $2, error: null})",
			"   try {",
			"     const data = await someApiCall()",
			"     set${1/(.*)/${1:/capitalize}/}Status({loading: false, data, error: null})",
			"   }catch(error){",
			"     set${1/(.*)/${1:/capitalize}/}Status({loading: false, data: $2, error})",
			"   }",
			"}"
		],
		"description": "React state"
	},
	"React Tailwind Loader": {
		"prefix": "tw_loader",
		"body": [
			"<div className=\"flex justify-center items-center\">",
			"  <div className=\"w-12 h-12 rounded-full border-4 border-t-4 border-gray-200 border-t-blue-500 animate-spin\"></div>",
			"</div>"
		],
		"description": "A simple spinning loader component"
	},
	"React Tailwind Error Banner": {
		"prefix": "tw_error",
		"body": [
			"<div className=\"p-4 mb-4 text-sm text-red-800 rounded-lg bg-red-50 dark:bg-gray-800 dark:text-red-400\" role=\"alert\">",
			"  <span className=\"font-medium\">Error!</span> ${1:Something went wrong. Please try again.}",
			"</div>"
		],
		"description": "A dismissible error banner component"
	},
	"React Tailwind Info Banner": {
		"prefix": "tw_info",
		"body": [
			"<div className=\"p-4 mb-4 text-sm text-blue-800 rounded-lg bg-blue-50 dark:bg-gray-800 dark:text-blue-400\" role=\"alert\">",
			"  <span className=\"font-medium\">Info!</span> ${1:Please read this important message.}",
			"</div>"
		],
		"description": "A dismissible info banner component"
	},
	"Tailwind Table": {
		"prefix": "tw_table",
		"body": [
			"<div className=\"overflow-x-auto\">",
			"  <table className=\"min-w-full border border-gray-300\">",
			"    <thead className=\"bg-gray-100\">",
			"      <tr className=\"border-gray-200 border-b\">",
			"        <th className=\"px-4 py-2 text-left\">Name</th>",
			"        <th className=\"px-4 py-2 text-left\">Email</th>",
			"      </tr>",
			"    </thead>",
			"    <tbody>",
			"      <tr className=\"border-gray-200 border-b hover:bg-gray-50\">",
			"        <td className=\"px-4 py-2 \">Alice</td>",
			"        <td className=\"px-4 py-2 \">alice@example.com</td>",
			"      </tr>",
			"    </tbody>",
			"  </table>",
			"</div>"
		],
		"description": "Simple Tailwind CSS table in JSX"
	},
	"React Tailwind Button": {
		"prefix": "tw_button",
		"body": [
			"<button className=\"text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800\">",
			"  ${1:Button Text}",
			"</button>"
		],
		"description": "A basic styled button component"
	},
	"React Tailwind Flex Center": {
		"prefix": "tw_flex-center",
		"body": [
			"<div className=\"flex items-center justify-center h-screen\">",
			"  ${1:<!-- Your centered content here -->}",
			"</div>"
		],
		"description": "A Flexbox container that centers its children"
	},
	"React Tailwind Container": {
		"prefix": "tw_container",
		"body": [
			"<div className=\"container mx-auto px-4\">",
			"  ${1:<!-- Your content here -->}",
			"</div>"
		],
		"description": "A responsive, centered container"
	},
	"API CRUD Functions": {
		"prefix": "rc_resource",
		"body": [
			"const BASE_URL = \"http://localhost:3000\";",
			"",
			"export async function get${1/(.*)/${1:/capitalize}/}sApi() {",
			"  return fetch(`\\${BASE_URL}/${1/(.*)/${1:/downcase}/}s`).then((res) => res.json());",
			"}",
			"",
			"export async function get${1/(.*)/${1:/capitalize}/}ByIdApi(id) {",
			"  return fetch(`\\${BASE_URL}/${1/(.*)/${1:/downcase}/}s/` + id).then((res) => res.json());",
			"}",
			"",
			"export async function create${1/(.*)/${1:/capitalize}/}Api(data) {",
			"  return fetch(`\\${BASE_URL}/${1/(.*)/${1:/downcase}/}s`, {",
			"    method: \"POST\",",
			"    headers: {",
			"      \"Content-Type\": \"application/json\",",
			"    },",
			"    body: JSON.stringify(data),",
			"  }).then((res) => res.json());",
			"}",
			"",
			"export async function delete${1/(.*)/${1:/capitalize}/}Api(id) {",
			"  return fetch(`\\${BASE_URL}/${1/(.*)/${1:/downcase}/}s/` + id, {",
			"    method: \"DELETE\",",
			"    headers: {",
			"      \"Content-Type\": \"application/json\",",
			"    },",
			"  }).then((res) => res.json());",
			"}",
			"",
			"export async function update${1/(.*)/${1:/capitalize}/}Api(id, data) {",
			"  return fetch(`\\${BASE_URL}/${1/(.*)/${1:/downcase}/}s/` + id, {",
			"    method: \"PUT\",",
			"    headers: {",
			"      \"Content-Type\": \"application/json\",",
			"    },",
			"    body: JSON.stringify(data),",
			"  }).then((res) => res.json());",
			"}"
		],
		"description": "Generate CRUD API functions for any resource with one input"
	},
	"Form": {
		"prefix": "rc_form",
		"body": [
			"",
			"export default function Form({ defaultValues, onSubmit }) {",
			"  const { register, handleSubmit, formState } = useForm({",
			"    defaultValues,",
			"  });",
			"",
			"  return (",
			"    <form onSubmit={handleSubmit(onSubmit)}>",
			"      <Col>",
			"        <Col>",
			"          <Row className=\"items-center\">",
			"            Email:",
			"            <Input",
			"              {...register(\"email\", {",
			"                required: \"This field is required\",",
			"              })}",
			"            />",
			"          </Row>",
			"          {formState.errors.name && (",
			"            <p className=\"text-red-500 text-sm mt-1\">",
			"              {formState.errors.name.message}",
			"            </p>",
			"          )}",
			"        </Col>",
			"",
			"        <Row className={\"mt-2 justify-end\"}>",
			"          <Button type=\"submit\">Submit</Button>",
			"        </Row>",
			"      </Col>",
			"    </form>",
			"  );",
			"}"
		],
		"description": "Form"
	},
	"Alert": {
		"prefix": "rc_alert",
		"body": [
			"const typeStyles = {",
			"  success: \"bg-green-100 text-green-800 border-green-300\",",
			"  error: \"bg-red-100 text-red-800 border-red-300\",",
			"  warning: \"bg-yellow-100 text-yellow-800 border-yellow-300\",",
			"  info: \"bg-blue-100 text-blue-800 border-blue-300\",",
			"};",
			"",
			"export default function Alert({ type = \"info\", children, closable = false }) {",
			"  const [visible, setVisible] = useState(true);",
			"",
			"  if (!visible) return null;",
			"",
			"  return (",
			"    <div",
			"      className={`flex items-center justify-between px-4 py-2 border rounded ${typeStyles[type]}`}",
			"    >",
			"      <Row className={\"items-center\"}>",
			"        {type === \"info\" && <Icon icon=\"oui:nav-info\" />}",
			"        {type === \"success\" && <Icon icon=\"oui:check-in-circle-filled\" />}",
			"        {(type === \"error\" || type === \"warning\") && <Icon icon=\"oui:alert\" />}",
			"        <span className=\"text-sm\">{children}</span>",
			"      </Row>",
			"      {closable && (",
			"        <button",
			"          onClick={() => setVisible(false)}",
			"          className=\"ml-2 text-xl leading-none focus:outline-none\"",
			"        >",
			"          &times;",
			"        </button>",
			"      )}",
			"    </div>",
			"  );",
			"}"
		],
		"description": "Alert"
	},
	"Select": {
		"prefix": "rc_select",
		"body": [
			"",
			"export default function Select(props) {",
			"  return (",
			"    <div className=\"relative w-full\">",
			"      <select",
			"        className={`w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 ${props.className}`}",
			"        {...props}",
			"      >",
			"        {props.children}",
			"      </select>",
			"    </div>",
			"  );",
			"}",
			""
		],
		"description": "Select"
	},
	"Input": {
		"prefix": "rc_input",
		"body": [
			"",
			"export default function Input({",
			"  type = \"text\",",
			"  placeholder = \"\",",
			"  icon = null,",
			"  iconPosition = \"left\", // \"left\" | \"right\"",
			"  ...props",
			"}) {",
			"  return (",
			"    <div className=\"relative w-full\">",
			"      {/* Input */}",
			"      <input",
			"        type={type}",
			"        placeholder={placeholder}",
			"        className={`w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 ${",
			"          icon ? (iconPosition === \"left\" ? \"pl-10\" : \"pr-10\") : \"\"",
			"        }`}",
			"        {...props}",
			"      />",
			"",
			"      {/* Optional Icon */}",
			"      {icon && (",
			"        <span",
			"          className={`absolute top-1/2 -translate-y-1/2 text-gray-400 ${",
			"            iconPosition === \"left\" ? \"left-3\" : \"right-3\"",
			"          }`}",
			"        >",
			"          {icon}",
			"        </span>",
			"      )}",
			"    </div>",
			"  );",
			"}"
		],
		"description": "Input"
	},
	"Footer": {
		"prefix": "rc_footer",
		"body": [
			"export default function Footer() {",
			"  return (",
			"    <footer className=\"bg-gray-100 text-black p-4\">",
			"      <div className=\"max-w-7xl mx-auto flex justify-between items-center\">",
			"        {/* Left side */}",
			"        <p>© {new Date().getFullYear()} MyApp</p>",
			"",
			"        {/* Right side */}",
			"        <div className=\"flex space-x-4\">",
			"          <a href=\"#\" className=\"hover:text-white\">",
			"            Privacy",
			"          </a>",
			"          <a href=\"#\" className=\"hover:text-white\">",
			"            Terms",
			"          </a>",
			"          <a href=\"#\" className=\"hover:text-white\">",
			"            Contact",
			"          </a>",
			"        </div>",
			"      </div>",
			"    </footer>",
			"  );",
			"}"
		],
		"description": "Footer"
	},
	"Navbar": {
		"prefix": "rc_navbar",
		"body": [
			"export default function Navbar() {",
			"  const [isOpen, setIsOpen] = useState(false);",
			"",
			"  const links = [",
			"    { name: \"Home\", href: \"#\" },",
			"    { name: \"About\", href: \"#\" },",
			"    { name: \"Services\", href: \"#\" },",
			"    { name: \"Contact\", href: \"#\" },",
			"  ];",
			"",
			"  return (",
			"    <nav className=\"bg-white shadow-md\">",
			"      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">",
			"        <div className=\"flex justify-between items-center h-16\">",
			"          {/* Logo */}",
			"          <div className=\"text-xl font-bold text-blue-600\">MyApp</div>",
			"",
			"          {/* Desktop Links */}",
			"          <div className=\"hidden md:flex space-x-6\">",
			"            {links.map((link) => (",
			"              <a",
			"                key={link.name}",
			"                href={link.href}",
			"                className=\"text-gray-700 hover:text-blue-600\"",
			"              >",
			"                {link.name}",
			"              </a>",
			"            ))}",
			"          </div>",
			"",
			"          {/* Mobile Button */}",
			"          <div className=\"md:hidden\">",
			"            <button",
			"              onClick={() => setIsOpen(!isOpen)}",
			"              className=\"text-gray-700 hover:text-blue-600 focus:outline-none text-2xl\"",
			"            >",
			"              {isOpen ? \"✕\" : \"☰\"}",
			"            </button>",
			"          </div>",
			"        </div>",
			"      </div>",
			"",
			"      {/* Mobile Menu */}",
			"      {isOpen && (",
			"        <div className=\"md:hidden px-4 pb-4 space-y-2\">",
			"          {links.map((link) => (",
			"            <a",
			"              key={link.name}",
			"              href={link.href}",
			"              className=\"block text-gray-700 hover:text-blue-600\"",
			"            >",
			"              {link.name}",
			"            </a>",
			"          ))}",
			"        </div>",
			"      )}",
			"    </nav>",
			"  );",
			"}"
		],
		"description": "Navbar"
	},
	"Container": {
		"prefix": "rc_container",
		"body": [
			"export default function Container({ className, children }) {",
			"  return (",
			"    <div className={`container mx-auto px-4 ` + className}>{children}</div>",
			"  );",
			"}"
		],
		"description": "Container"
	},
	"Col": {
		"prefix": "rc_col",
		"body": [
			"export default function Col({ className, center, children }) {",
			"  return (",
			"    <div",
			"      className={`flex w-full flex-col gap-2 ${",
			"        center ? \"items-center\" : \"\"",
			"      } \\${className}`}",
			"    >",
			"      {children}",
			"    </div>",
			"  );",
			"}",
			""
		],
		"description": "Col"
	},
	"Row": {
		"prefix": "rc_row",
		"body": [
			"export default function Row({ className, children, center }) {",
			"  return (",
			"    <div className={`flex gap-2 ${center ? \"items-center\" : \"\"} \\${className}`}>",
			"      {children}",
			"    </div>",
			"  );",
			"}",
			""
		],
		"description": "Row"
	},
	"Modal": {
		"prefix": "rc_modal",
		"body": [
			"export default function Modal({ onClose, title, children, footer }) {",
			"  return (",
			"    <div",
			"      className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/50\"",
			"      onClick={onClose} // close when clicking backdrop",
			"    >",
			"      <div",
			"        className=\"bg-white  max-w-[95%] min-w-[400px] rounded-xl bg-white shadow-xl p-3 relative\"",
			"        onClick={(e) => e.stopPropagation()} // prevent closing when clicking inside",
			"      >",
			"        {/* Header */}",
			"        <div className=\"flex justify-between items-center mb-4\">",
			"          {title && <h2 className=\"text-lg font-semibold\">{title}</h2>}",
			"",
			"          <button",
			"            onClick={onClose}",
			"            className=\"text-gray-500 cursor-pointer hover:text-gray-700\"",
			"          >",
			"            ✕",
			"          </button>",
			"        </div>",
			"",
			"        {/* Body */}",
			"        <div>{children}</div>",
			"",
			"        {footer && (",
			"          <div className=\"mt-4 flex justify-end gap-2 items-center\">",
			"            {footer}",
			"          </div>",
			"        )}",
			"      </div>",
			"    </div>",
			"  );",
			"}"
		],
		"description": "Modal"
	},
	"React Reusable Button": {
		"prefix": "rc_button",
		"body": [
			"const typeClasses = {",
			"  danger:",
			"    \"text-white bg-red-700 hover:bg-red-800 focus:ring-1 focus:ring-red-300\",",
			"  success:",
			"    \"text-white bg-blue-700 hover:bg-blue-800 focus:ring-1 focus:ring-blue-300\",",
			"  default:",
			"    \"text-black bg-gray-300 hover:bg-gray-400 focus:ring-1 focus:ring-gray-400\",",
			"};",
			"",
			"export default function Button({",
			"  onClick,",
			"  children,",
			"  type = \"default\",",
			"  size = 3,",
			"  className = \"\",",
			"  ...props",
			"}) {",
			"  const paddingX = size * 4;",
			"  const paddingY = size * 1.5;",
			"  const fontSize = size * 5;",
			"",
			"  return (",
			"    <button",
			"      onClick={onClick}",
			"      style={{",
			"        paddingLeft: paddingX,",
			"        paddingRight: paddingX,",
			"        paddingTop: paddingY,",
			"        paddingBottom: paddingY,",
			"        fontSize,",
			"      }}",
			"      className={`cursor-pointer rounded-sm focus:outline-none ${typeClasses[type] || typeClasses.default} \\${className}`}",
			"      {...props}",
			"    >",
			"      {children}",
			"    </button>",
			"  );",
			"}"
		],
		"description": "Reusable Button component with type variants (danger, success, default)"
	},
	"Loader": {
		"prefix": "rc_loader",
		"body": [
			"export default function Loader({ type, size = 1, shimmerWidths = [\"100%\", \"100%\", \"100%\"] }) {",
			"  if (type === \"indeterminate\") {",
			"    return (",
			"      <div",
			"        style={{ height: size }}",
			"        className=\"w-full relative bg-gray-200 overflow-hidden\"",
			"      >",
			"        <div className=\"progress w-full h-full bg-pink-500 origin-left-right\"></div>",
			"      </div>",
			"    );",
			"  } else if (type === \"shimmer\") {",
			"    return (",
			"      <div style={{ gap: size * 2 }} className=\"flex flex-col\">",
			"        {shimmerWidths.map((width, i) => (",
			"          <div",
			"            key={i}",
			"            style={{",
			"              height: size * 2,",
			"              width,",
			"            }}",
			"            className=\"rounded-lg bg-gray-200 animate-pulse\"",
			"          ></div>",
			"        ))}",
			"      </div>",
			"    );",
			"  }",
			"",
			"  return (",
			"    <div class=\"flex items-center justify-center h-screen\">",
			"      <div",
			"        style={{ height: size * 8, width: size * 8, borderWidth: size }}",
			"        class=\"lue-500 border-t-transparent rounded-full animate-spin\"",
			"      ></div>",
			"    </div>",
			"  );",
			"}",
			""
		],
		"description": "Loader"
	},
	"React Modal with State": {
		"prefix": "rc_modal_use",
		"body": [
			"const [${1:modalOpen}, set${1/(.*)/${1:/capitalize}/}] = useState(false);",
			"",
			"{${1:modalOpen} && (",
			"  <Modal",
			"    title=\"${2:Title}\"",
			"    onClose={() => set${1/(.*)/${1:/capitalize}/}(false)}",
			"  ></Modal>",
			")}"
		],
		"description": "React modal snippet with dynamic state name"
	},
}
